# -*- coding: utf-8 -*-
"""TinyLlama-1.1B-Chat-v1.0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/#fileId=https%3A//huggingface.co/TinyLlama/TinyLlama-1.1B-Chat-v1.0.ipynb
"""

!pip install -U transformers

!pip install bert-score
from bert_score import score

"""## Local Inference on GPU
Model page: https://huggingface.co/TinyLlama/TinyLlama-1.1B-Chat-v1.0

‚ö†Ô∏è If the generated code snippets do not work, please open an issue on either the [model repo](https://huggingface.co/TinyLlama/TinyLlama-1.1B-Chat-v1.0)
			and/or on [huggingface.js](https://github.com/huggingface/huggingface.js/blob/main/packages/tasks/src/model-libraries-snippets.ts) üôè
"""

# Use a pipeline as a high-level helper
from transformers import pipeline

pipe = pipeline("text-generation", model="TinyLlama/TinyLlama-1.1B-Chat-v1.0")
messages = [
    {"role": "user", "content": "Who are you?"},
]
pipe(messages)

# Load model directly
from transformers import AutoTokenizer, AutoModelForCausalLM

tokenizer = AutoTokenizer.from_pretrained("TinyLlama/TinyLlama-1.1B-Chat-v1.0")
model = AutoModelForCausalLM.from_pretrained("TinyLlama/TinyLlama-1.1B-Chat-v1.0")

import torch

device = "cuda" if torch.cuda.is_available() else "cpu"
model.to(device)

#Break this down into logical steps
questions = [
    "Alice has 20 quarters. She wants to exchange them for nickels and so she goes to the bank. After getting back from the bank, she discovers that 20% of the nickels are iron nickels worth $3 each. What is the total value of her money now? Break this down into logical steps",
    "John writes 20 pages a day.  How long will it take him to write 3 books that are 400 pages each?Break this down into logical steps",
    "John orders food for a massive restaurant.  He orders 1000 pounds of beef for $8 per pound.  He also orders twice that much chicken at $3 per pound.  How much did everything cost?Break this down into logical steps",
    "Sally and Bob have made plans to go on a trip at the end of the year. They both decide to work as babysitters and save half of what they've earned for their trip. If Sally makes $6 per day and Bob makes $4 per day, how much money will they both have saved for their trip after a year?Break this down into logical steps",
    "John works a job that offers performance bonuses.  He makes $80 a day and works for 8 hours.  He has the option of working hard to earn the performance bonus of an extra $20 a day, but the extra effort results in a 2-hour longer workday.  How much does John make per hour if he decides to earn the bonus?Break this down into logical steps"

]

responses = []

for question in questions:
    messages = [{"role": "user", "content": question}]
    response = pipe(messages)
    responses.append(response[0]["generated_text"])

for i, (q, a) in enumerate(zip(questions, responses)):
    print(f"Q{i+1}: {q}")
    print(f"A{i+1}: {a}\n")

#Explain your reasoning in detail
question2 = [
    "Alice has 20 quarters. She wants to exchange them for nickels and so she goes to the bank. After getting back from the bank, she discovers that 20% of the nickels are iron nickels worth $3 each. What is the total value of her money now?Explain your reasoning in detail",
    "John writes 20 pages a day.  How long will it take him to write 3 books that are 400 pages each?Explain your reasoning in detail",
    "John orders food for a massive restaurant.  He orders 1000 pounds of beef for $8 per pound.  He also orders twice that much chicken at $3 per pound.  How much did everything cost?Explain your reasoning in detail",
    "Sally and Bob have made plans to go on a trip at the end of the year. They both decide to work as babysitters and save half of what they've earned for their trip. If Sally makes $6 per day and Bob makes $4 per day, how much money will they both have saved for their trip after a year?Explain your reasoning in detail",
    "John works a job that offers performance bonuses.  He makes $80 a day and works for 8 hours.  He has the option of working hard to earn the performance bonus of an extra $20 a day, but the extra effort results in a 2-hour longer workday.  How much does John make per hour if he decides to earn the bonus?Explain your reasoning in detail"

]

responses2 = []

for question in question2:
    messages = [{"role": "user", "content": question}]
    response = pipe(messages)
    responses2.append(response[0]["generated_text"])

for i, (q, a) in enumerate(zip(question2, responses2)):
    print(f"Q{i+1}: {q}")
    print(f"A{i+1}: {a}\n")

#Walk me through your thinking
question3 = [
    "Alice has 20 quarters. She wants to exchange them for nickels and so she goes to the bank. After getting back from the bank, she discovers that 20% of the nickels are iron nickels worth $3 each. What is the total value of her money now?Walk me through your thinking",
    "John writes 20 pages a day.  How long will it take him to write 3 books that are 400 pages each?Walk me through your thinking",
    "John orders food for a massive restaurant.  He orders 1000 pounds of beef for $8 per pound.  He also orders twice that much chicken at $3 per pound.  How much did everything cost?Walk me through your thinking",
    "Sally and Bob have made plans to go on a trip at the end of the year. They both decide to work as babysitters and save half of what they've earned for their trip. If Sally makes $6 per day and Bob makes $4 per day, how much money will they both have saved for their trip after a year?Walk me through your thinking",
    "John works a job that offers performance bonuses.  He makes $80 a day and works for 8 hours.  He has the option of working hard to earn the performance bonus of an extra $20 a day, but the extra effort results in a 2-hour longer workday.  How much does John make per hour if he decides to earn the bonus?Walk me through your thinking"

]

responses3 = []

for question in question3:
    messages = [{"role": "user", "content": question}]
    response = pipe(messages)
    responses3.append(response[0]["generated_text"])

for i, (q, a) in enumerate(zip(question3, responses3)):
    print(f"Q{i+1}: {q}")
    print(f"A{i+1}: {a}\n")

#Let's think step by step.
question4 = [
    "Alice has 20 quarters. She wants to exchange them for nickels and so she goes to the bank. After getting back from the bank, she discovers that 20% of the nickels are iron nickels worth $3 each. What is the total value of her money now?Let's think step by step.",
    "John writes 20 pages a day.  How long will it take him to write 3 books that are 400 pages each?Let's think step by step.",
    "John orders food for a massive restaurant.  He orders 1000 pounds of beef for $8 per pound.  He also orders twice that much chicken at $3 per pound.  How much did everything cost?Let's think step by step.",
    "Sally and Bob have made plans to go on a trip at the end of the year. They both decide to work as babysitters and save half of what they've earned for their trip. If Sally makes $6 per day and Bob makes $4 per day, how much money will they both have saved for their trip after a year?Let's think step by step.",
    "John works a job that offers performance bonuses.  He makes $80 a day and works for 8 hours.  He has the option of working hard to earn the performance bonus of an extra $20 a day, but the extra effort results in a 2-hour longer workday.  How much does John make per hour if he decides to earn the bonus?Let's think step by step."

]

responses4 = []

for question in question4:
    messages = [{"role": "user", "content": question}]
    response = pipe(messages)
    responses4.append(response[0]["generated_text"])

for i, (q, a) in enumerate(zip(question4, responses4)):
    print(f"Q{i+1}: {q}")
    print(f"A{i+1}: {a}\n")

#Solve this one step at a time
question5 = [
    "Alice has 20 quarters. She wants to exchange them for nickels and so she goes to the bank. After getting back from the bank, she discovers that 20% of the nickels are iron nickels worth $3 each. What is the total value of her money now?Solve this one step at a time",
    "John writes 20 pages a day.  How long will it take him to write 3 books that are 400 pages each?Solve this one step at a time",
    "John orders food for a massive restaurant.  He orders 1000 pounds of beef for $8 per pound.  He also orders twice that much chicken at $3 per pound.  How much did everything cost?Solve this one step at a time",
    "Sally and Bob have made plans to go on a trip at the end of the year. They both decide to work as babysitters and save half of what they've earned for their trip. If Sally makes $6 per day and Bob makes $4 per day, how much money will they both have saved for their trip after a year?Solve this one step at a time",
    "John works a job that offers performance bonuses.  He makes $80 a day and works for 8 hours.  He has the option of working hard to earn the performance bonus of an extra $20 a day, but the extra effort results in a 2-hour longer workday.  How much does John make per hour if he decides to earn the bonusSolve this one step at a time?"

]

responses5 = []

for question in question5:
    messages = [{"role": "user", "content": question}]
    response = pipe(messages)
    responses5.append(response[0]["generated_text"])

for i, (q, a) in enumerate(zip(question5, responses5)):
    print(f"Q{i+1}: {q}")
    print(f"A{i+1}: {a}\n")

answers = [
    "A quarter is worth five nickels because .25 / .05 = <<.25/.05=5>>5  She gets 100 nickels from the bank because 20 x 5 = <<20*5=100>>100 20 of the nickels are iron nickels because 100 x .20 = <<100*.20=20>>20 80 of the nickels are regular because 100 - 20 = <<100-20=80>>80 The iron nickels are worth $60 because 20 x 3 = <<20*3=60>>60 The regular nickels are worth $4 because 80 x .05 = <<80*.05=4>>4 Her money is now worth $64 because 60 + 4 = <<60+4=64>>64 #### 64",
    "He wants to write 3*400=<<3*400=1200>>1200 pages So it will take him 1200/20=<<1200/20=60>>60 days#### 60",
    "The beef cost $8 * 1000 = $<<8*1000=8000>>8000 He buys 1000 * 2 = <<1000*2=2000>>2000 pounds of chicken So the chicken cost 2000 * $3 = $<<2000*3=6000>>6000 So the total cost is $8000 + $6000 = $<<8000+6000=14000>>14,000 #### 14000",
    "Saly saves 1/2 * $6/day = $<<1/2*6=3>>3/day. Since each year have 365 days, the total amount of money Sally will save in a year is $3/day * 365 days/year = $<<3*365=1095>>1095/year Bob saves 1/2 * $4/day = $<<1/2*4=2>>2/day. The total amount of money Bob will have saved in a year is $2/day * 365 days/year = $<<2*365=730>>730/year In total, Sally and Bob would have saved $730 + $1095 = $<<730+1095=1825>>1825 #### 1825",
    "First, we need to determine the length of John's workday if he decides to earn the bonus. We do this by performing 8+2= <<8+2=10>>10 hours for his workday.Next, we need to determine his overall pay. We do this by performing 80+20=<<80+20=100>>100 dollars a day. We then determine John's hourly rate by dividing his pay by the number of hours worked, performing 100/10= <<100/10=10>>10 dollars an hour.#### 10"
  ]

import pandas as pd
new_rows = pd.DataFrame({
    "reference": answers,
    "response1": responses,
    "response2": responses2,
    "response3": responses3,
    "response4": responses4,
    "response5": responses5,
}
)

existing_df = pd.read_csv("responses_and_references.csv")

combined_df = pd.concat([existing_df, new_rows], ignore_index=True)

combined_df.to_csv("responses_and_references_updated.csv", index=False)

print(combined_df.tail())  # Show last few rows
print("Total rows:", len(combined_df))

import pandas as pd

# Load the CSV
df = pd.read_csv("responses_and_references_updated.csv")

reference = df["reference"].tolist()
candidates_1 = df["response1"].tolist()
candidates_2 = df["response2"].tolist()
candidates_3 = df["response3"].tolist()
candidates_4 = df["response4"].tolist()
candidates_5 = df["response5"].tolist()

from bert_score import score

P1, R1, F1 = score(candidates_1, reference, lang="en", verbose=True)
P2, R2, F2 = score(candidates_2, reference, lang="en", verbose=True)
P3, R3, F3 = score(candidates_3, reference, lang="en", verbose=True)
P4, R4, F4 = score(candidates_4, reference, lang="en", verbose=True)
P5, R5, F5 = score(candidates_5, reference, lang="en", verbose=True)

df["F1"] = F1.tolist()
df["F2"] = F2.tolist()
df["F3"] = F3.tolist()
df["F4"] = F4.tolist()
df["F5"] = F5.tolist()

print("Mean F1 scores:")
print("Model 1:", F1.mean().item())
print("Model 2:", F2.mean().item())
print("Model 3:", F3.mean().item())
print("Model 4:", F4.mean().item())
print("Model 5:", F5.mean().item())

df = pd.DataFrame({
    "reference": reference,
    "response1": candidates_1,
    "response2": candidates_2,
    "response3": candidates_3,
    "response4": candidates_4,
    "response5": candidates_5,
    "F1" : F1.tolist(),
    "F2" : F2.tolist(),
    "F3" : F3.tolist(),
    "F4" : F4.tolist(),
    "F5" : F5.tolist(),
})

df.to_csv("responses_with_all_bertscores.csv", index=False)

"""## Remote Inference via Inference Providers
Ensure you have a valid **HF_TOKEN** set in your environment, running this may bill your account above the free tier.
The following Python example shows how to run the model remotely on HF Inference Providers, using the **auto** provider setting (automatically selects an available inference provider).
"""

import os
from huggingface_hub import InferenceClient

client = InferenceClient(
    provider="auto",
    api_key=os.environ["HF_TOKEN"],
)

completion = client.chat.completions.create(
    model="TinyLlama/TinyLlama-1.1B-Chat-v1.0",
    messages=[
        {
            "role": "user",
            "content": "What is the capital of France?"
        }
    ],
)

print(completion.choices[0].message)